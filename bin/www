#!/usr/bin/env node

/**
 * Module dependencies.
 */

var app = require('../app');
var debug = require('debug')('myexpress:server');
var http = require('http');

/**
 * Get port from environment and store in Express.
 */

var port = normalizePort(process.env.PORT || '3000');   /**whatever is in theenvironment variable PORT,or3000 if there's nothing there*/
app.set('port', port);
/**  port=8888; You can use this to change port to 8888*/

/**
 * Create HTTP server.
 */

var server = http.createServer(app);    /* Return a new instance of  http.Server*/

/**
 * Listen on provided port, on all network interfaces.
 */

server.listen(port);    /*Begin accepting connections on the specified port*/
server.on('error', onError);                  /*I don't know*/
server.on('listening', onListening);

/**
 * Normalize a port into a number, string, or false.
 */

function normalizePort(val) {
  var port = parseInt(val, 10);         /*praseInt: parses a string and returns an integer(後面表示10進位)*/
  if (isNaN(port)) { return val; }      // named pipe     /*isNaN determines whether a value is an illegal number (Not-a-Number)*/
  if (port >= 0) { return port; }          // port number
  return false;
}

/**
 * Event listener for HTTP server "error" event.
 */

function onError(error) {
  if (error.syscall !== 'listen') {
    throw error;          /*throw use to自定義錯誤*/
  }
  var bind = typeof port === 'string'
    ? 'Pipe ' + port
    : 'Port ' + port;
  // handle specific listen errors with friendly messages
  switch (error.code) {
    case 'EACCES':
      console.error(bind + ' requires elevated privileges');
      process.exit(1);
      break;
    case 'EADDRINUSE':
      console.error(bind + ' is already in use');
      process.exit(1);
      break;
    default:
      throw error;
  }
}

/**
 * Event listener for HTTP server "listening" event.
 */

function onListening() {
  var addr = server.address();
  var bind = typeof addr === 'string'
    ? 'pipe ' + addr
    : 'port ' + addr.port;
  debug('Listening on ' + bind);
}
